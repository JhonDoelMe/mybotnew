import os
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
import logging

load_dotenv()
logger = logging.getLogger(__name__)

ALERTS_IN_UA_TOKEN = os.getenv("ALERTS_IN_UA_TOKEN")
BASE_URL = "https://api.alerts.in.ua/v1/alerts/active.json"

air_raid_keyboard = [['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–≤–æ–≥—É'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
air_raid_reply_markup = ReplyKeyboardMarkup(air_raid_keyboard, resize_keyboard=True)

async def show_air_raid_menu(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=air_raid_reply_markup)

async def check_air_raid(update: Update, context: CallbackContext) -> None:
    if not ALERTS_IN_UA_TOKEN:
        await update.message.reply_text("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è API —Ç—Ä–µ–≤–æ–≥")
        return

    try:
        response = requests.get(BASE_URL, headers={"Authorization": ALERTS_IN_UA_TOKEN}, timeout=10)
        response.raise_for_status()
        data = response.json()

        if not isinstance(data, dict):
            raise ValueError("Invalid API response format")

        active_alerts = [region for region, status in data.items() if status.get('enabled')]
        
        if active_alerts:
            message = "üö® –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞ –≤:\n" + "\n".join(active_alerts)
        else:
            message = "‚úÖ –¢—Ä–µ–≤–æ–≥ –Ω–µ—Ç"
            
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Air raid check error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")