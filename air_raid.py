import os
import aiohttp
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from database import get_connection, get_user_settings, update_user_setting
from dotenv import load_dotenv
import logging

load_dotenv()
logger = logging.getLogger(__name__)

ALERTS_API_URL = "https://api.ukrainealarm.com/api/v3/alerts/active"
REGIONS_API_URL = "https://api.ukrainealarm.com/api/v3/regions"
ALERTS_API_TOKEN = os.getenv("UKRAINE_ALARM_API_TOKEN")

async def show_air_raid_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['notify_air_alerts'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        region_id = settings.get('region_id', None)
        region_name = settings.get('region_name', "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")  # –•—Ä–∞–Ω–∏–º –∏–º—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        
        keyboard = [
            ['üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–≤–æ–≥–∏'],
            ['üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω'],
            ['üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' if not settings['notify_air_alerts'] else 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
            ['‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}\n"
            f"–†–µ–≥–∏–æ–Ω: {region_name}",
            reply_markup=reply_markup
        )
    return settings

async def select_region(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    if not ALERTS_API_TOKEN:
        await update.message.reply_text("–û—à–∏–±–∫–∞: API-—Ç–æ–∫–µ–Ω –¥–ª—è ukrainealarm.com –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        headers = {"Authorization": ALERTS_API_TOKEN}
        async with aiohttp.ClientSession() as session:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ API —Ä–µ–≥–∏–æ–Ω–æ–≤: {REGIONS_API_URL} —Å —Ç–æ–∫–µ–Ω–æ–º {ALERTS_API_TOKEN[:5]}...")
            async with session.get(REGIONS_API_URL, headers=headers, timeout=aiohttp.ClientTimeout(total=10)) as response:
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: {response.status}")
                if response.status == 401:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π API-—Ç–æ–∫–µ–Ω")
                    return
                elif response.status == 403:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏–ª–∏ –ª–∏–º–∏—Ç—ã API)")
                    return
                elif response.status != 200:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ API: –°—Ç–∞—Ç—É—Å {response.status}")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                response_text = await response.text()
                logger.info(f"–û—Ç–≤–µ—Ç API: {response_text}")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ JSON
                regions = json.loads(response_text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                if not isinstance(regions, list):
                    logger.error(f"–û—Ç–≤–µ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {regions}")
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
                    return
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–∏ (State)
                keyboard = [[region["regionName"]] for region in regions if region.get("regionType") == "State"]
                if not keyboard:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤")
                    return
                
                keyboard.append(['‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥'])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", reply_markup=reply_markup)
                context.user_data['awaiting_region'] = True
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–∏–æ–Ω–æ–≤")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–∏–æ–Ω–æ–≤")

async def check_air_raid(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    if not ALERTS_API_TOKEN:
        await update.message.reply_text("–û—à–∏–±–∫–∞: API-—Ç–æ–∫–µ–Ω –¥–ª—è ukrainealarm.com –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        region_id = settings.get('region_id')
    
    try:
        headers = {"Authorization": ALERTS_API_TOKEN}
        async with aiohttp.ClientSession() as session:
            async with session.get(ALERTS_API_URL, headers=headers, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 401:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π API-—Ç–æ–∫–µ–Ω")
                    return
                response.raise_for_status()
                data = await response.json()
        
        active_alerts = []
        if not region_id:
            active_alerts = [region["regionName"] for region in data if region["activeAlerts"]]
        else:
            for region in data:
                if region["regionId"] == region_id and region["activeAlerts"]:
                    active_alerts.append(region["regionName"])
        
        if active_alerts:
            message = "üö® –¢—Ä–µ–≤–æ–≥–∞ –≤:\n" + "\n".join(active_alerts)
        else:
            message = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ"
            
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Air raid error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥")

async def toggle_notifications(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        new_status = not settings['notify_air_alerts']
        update_user_setting(conn, user_id, 'notify_air_alerts', int(new_status))
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        await show_air_raid_menu(update, context)

async def handle_air_raid_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if 'awaiting_region' in context.user_data:
        try:
            headers = {"Authorization": ALERTS_API_TOKEN}
            async with aiohttp.ClientSession() as session:
                async with session.get(REGIONS_API_URL, headers=headers) as response:
                    regions = await response.json()
            
            region = next((r for r in regions if r["regionName"] == text and r["regionType"] == "State"), None)
            if region:
                with get_connection() as conn:
                    update_user_setting(conn, user_id, 'region_id', region["regionId"])
                    update_user_setting(conn, user_id, 'region_name', region["regionName"])
                    conn.commit()
                await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: {text}")
                del context.user_data['awaiting_region']
                settings = await show_air_raid_menu(update, context)
                logger.info(f"After region selection, settings: {settings}")
            elif text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥':
                del context.user_data['awaiting_region']
                await show_air_raid_menu(update, context)
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞")
    
    else:
        if text == 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–≤–æ–≥–∏':
            await check_air_raid(update, context)
        elif text == 'üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω':
            await select_region(update, context)
        elif text in ('üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'):
            await toggle_notifications(update, context)
        elif text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            from button_handlers import main_reply_markup
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_reply_markup)
            context.user_data.clear()