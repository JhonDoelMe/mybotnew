import os
import aiohttp
import json
import logging
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from cachetools import TTLCache
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from database import get_connection, get_user_settings, update_user_setting
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
ALERTS_API_URL = "https://api.ukrainealarm.com/api/v3/alerts"
REGIONS_API_URL = "https://api.ukrainealarm.com/api/v3/regions"
ALERTS_API_TOKEN = os.getenv("UKRAINE_ALARM_API_TOKEN")

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç
REGION_CACHE = TTLCache(maxsize=100, ttl=300)
ALERT_CACHE = TTLCache(maxsize=100, ttl=60)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_RETRIES = 3
RETRY_DELAY = 2
REQUEST_TIMEOUT = 15

class UkraineAlarmAPI:
    @staticmethod
    async def _make_request(url: str, headers: Dict = None, params: Dict = None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        headers = headers or {}
        params = params or {}
        
        if ALERTS_API_TOKEN:
            headers["Authorization"] = ALERTS_API_TOKEN
        
        async with aiohttp.ClientSession() as session:
            for attempt in range(MAX_RETRIES):
                try:
                    async with session.get(
                        url,
                        headers=headers,
                        params=params,
                        timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
                    ) as response:
                        if response.status == 429:
                            wait_time = int(response.headers.get('Retry-After', RETRY_DELAY))
                            await asyncio.sleep(wait_time)
                            continue
                            
                        response.raise_for_status()
                        return await response.json()
                        
                except aiohttp.ClientError as e:
                    logger.warning(f"Attempt {attempt + 1} failed: {e}")
                    if attempt == MAX_RETRIES - 1:
                        raise
                    await asyncio.sleep(RETRY_DELAY)
        
        return None

    @classmethod
    async def get_regions(cls) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        if 'regions' in REGION_CACHE:
            return REGION_CACHE['regions']
            
        regions = await cls._make_request(REGIONS_API_URL)
        if regions:
            REGION_CACHE['regions'] = regions
        return regions or []

    @classmethod
    async def get_active_alerts(cls, region_id: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏"""
        cache_key = f"alerts_{region_id}" if region_id else "all_alerts"
        if cache_key in ALERT_CACHE:
            return ALERT_CACHE[cache_key]
            
        url = f"{ALERTS_API_URL}/{region_id}" if region_id else ALERTS_API_URL
        alerts = await cls._make_request(url)
        
        if alerts:
            ALERT_CACHE[cache_key] = alerts
        return alerts or []

async def show_air_raid_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        
        status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if settings['notify_air_alerts'] else "üîï –í—ã–∫–ª—é—á–µ–Ω—ã"
        region_status = settings['region_name'] or "–Ω–µ –≤—ã–±—Ä–∞–Ω"
        
        keyboard = [
            ['üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–≤–æ–≥–∏'],
            ['üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω'],
            ['üîî –í–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' if not settings['notify_air_alerts'] else 'üîï –í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
            ['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üö® –ú–µ–Ω—é –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥\n\n"
            f"–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {status}\n"
            f"–†–µ–≥–∏–æ–Ω: {region_status}",
            reply_markup=reply_markup
        )

async def select_region(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    if not ALERTS_API_TOKEN:
        await update.message.reply_text("‚ö†Ô∏è API-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    try:
        regions = await UkraineAlarmAPI.get_regions()
        if not regions:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤")
            return
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–∏ (State) –∏ —Ä–∞–π–æ–Ω—ã (District)
        oblasts = [r for r in regions if r.get("regionType") == "State"]
        districts = [r for r in regions if r.get("regionType") == "District"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        keyboard = []
        for i in range(0, len(oblasts), 2):
            row = oblasts[i:i+2]
            keyboard.append([r["regionName"] for r in row])
        
        keyboard.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ —Ä–∞–π–æ–Ω:",
            reply_markup=reply_markup
        )
        context.user_data['awaiting_region'] = True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–≥–∏–æ–Ω–æ–≤")

async def check_air_raid(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        region_id = settings.get('region_id')
        region_name = settings.get('region_name', '–£–∫—Ä–∞–∏–Ω–∞')
    
    try:
        alerts = await UkraineAlarmAPI.get_active_alerts(region_id)
        if not alerts:
            await update.message.reply_text(f"‚úÖ –í {region_name} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥")
            return
            
        active_alerts = []
        for alert in alerts:
            if alert.get("activeAlerts"):
                for alarm in alert["activeAlerts"]:
                    start_time = datetime.strptime(alarm["alertStarted"], "%Y-%m-%dT%H:%M:%S%z")
                    active_alerts.append({
                        "region": alert["regionName"],
                        "type": alarm["alertType"],
                        "start": start_time.strftime("%H:%M %d.%m.%Y"),
                        "duration": str(timedelta(seconds=alarm["duration"]))
                    })
        
        if not active_alerts:
            await update.message.reply_text(f"‚úÖ –í {region_name} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥")
            return
            
        message = ["üö® –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏:"]
        for alert in active_alerts:
            message.append(
                f"\nüìç {alert['region']}\n"
                f"üîπ –¢–∏–ø: {alert['type']}\n"
                f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {alert['start']}\n"
                f"üïí –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {alert['duration']}"
            )
            
        await update.message.reply_text("\n".join(message))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–≤–æ–≥: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥")

async def toggle_notifications(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–≤–æ–≥–∞—Ö"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        new_status = not settings['notify_air_alerts']
        update_user_setting(conn, user_id, 'notify_air_alerts', int(new_status))
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        await show_air_raid_menu(update, context)

async def handle_region_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = update.effective_user.id
    selected_region = update.message.text
    
    if selected_region == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        context.user_data.pop('awaiting_region', None)
        await show_air_raid_menu(update, context)
        return
    
    try:
        regions = await UkraineAlarmAPI.get_regions()
        if not regions:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã")
            return
            
        region = next((r for r in regions if r["regionName"] == selected_region), None)
        if not region:
            await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
            
        with get_connection() as conn:
            update_user_setting(conn, user_id, 'region_id', region["regionId"])
            update_user_setting(conn, user_id, 'region_name', region["regionName"])
            
        await update.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: {region['regionName']}")
        context.user_data.pop('awaiting_region', None)
        await show_air_raid_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞")