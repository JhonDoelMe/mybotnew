# air_raid.py
import requests
import json
import logging
import asyncio
from typing import Dict, List, Optional, Any, Set

import telegram
from telegram.ext import ContextTypes
from telegram.error import BadRequest, Forbidden

import database as db
import config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å config –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ bot_data
LAST_STATUS_KEY = 'last_alert_status'

async def get_air_raid_status() -> Optional[List[Dict[str, Any]]]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ —Å API.

    Returns:
        Optional[List[Dict[str, Any]]]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    api_url = config.cfg.get('AIR_RAID_API_URL')
    auth_token = config.cfg.get('UKRAINE_ALARM_TOKEN')

    if not api_url or not auth_token:
        logger.error("Air Raid API URL or Auth Token is not configured.")
        return None

    headers = {'Authorization': auth_token}
    try:
        response = requests.get(api_url, headers=headers, timeout=15) # –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞, —Ö–æ—Ç—è raise_for_status() –¥–æ–ª–∂–Ω–∞ —ç—Ç–æ –ø–æ–∫—Ä—ã—Ç—å
        if response.status_code == 200:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º response.json() –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                data = response.json()
                # –û–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ API v3
                if isinstance(data, list):
                    return data
                else:
                    logger.error(f"Air Raid API returned unexpected data type: {type(data)}. Expected list.")
                    return None
            except json.JSONDecodeError as e:
                logger.error(f"Failed to decode JSON response from Air Raid API: {e}")
                logger.debug(f"Response text: {response.text}")
                return None
            except Exception as e:
                 logger.error(f"An unexpected error occurred during JSON processing: {e}")
                 return None
        else:
            # –≠—Ç–∞ —á–∞—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ–π –∏–∑-–∑–∞ raise_for_status, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º
            logger.error(f"Air Raid API request failed with status code {response.status_code}: {response.text}")
            return None

    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching air raid status: {e}")
        return None
    except Exception as e:
        logger.error(f"An unexpected error occurred in get_air_raid_status: {e}")
        return None


def format_alert_message(region_name: str, alert_type: Optional[str] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–µ–≤–æ–≥–∏."""
    type_str = f" ({alert_type})" if alert_type else ""
    return f"üö® –£–í–ê–ì–ê! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ **{region_name}**!{type_str}\n–ü—Ä—è–º—É–π—Ç–µ –¥–æ —É–∫—Ä–∏—Ç—Ç—è!"

def format_no_alert_message(region_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–±–æ–µ —Ç—Ä–µ–≤–æ–≥–∏."""
    return f"‚úÖ –í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –≤ **{region_name}**."

async def check_air_raid_status(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç context.bot_data –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    logger.info("Checking air raid status...")
    current_alerts_list = await get_air_raid_status()
    notification_delay = config.cfg.get('NOTIFICATION_DELAY', 0.1) # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞

    if current_alerts_list is None:
        logger.warning("Could not fetch current air raid status. Skipping check.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ bot_data. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
    # –•—Ä–∞–Ω–∏–º –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å {region_id: alert_data} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    last_status: Dict[str, Dict[str, Any]] = context.bot_data.get(LAST_STATUS_KEY, {})
    current_status: Dict[str, Dict[str, Any]] = {}
    current_active_regions: Set[str] = set()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API
    for alert_region in current_alerts_list:
        region_id = alert_region.get('regionId')
        if not region_id:
            logger.warning(f"Alert region missing 'regionId': {alert_region}")
            continue
        current_status[region_id] = alert_region
        # –ï—Å–ª–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ ID –≤ —Å–µ—Ç
        if alert_region.get('activeAlerts'):
             current_active_regions.add(region_id)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É activeAlerts, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–∏–ø—ã —Ç—Ä–µ–≤–æ–≥
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å set –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–≤–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    # –ù–æ–≤—ã–µ —Ç—Ä–µ–≤–æ–≥–∏: —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã —Å–µ–π—á–∞—Å, –Ω–æ –Ω–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã (–∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏) —Ä–∞–Ω—å—à–µ
    new_alerts = current_active_regions - set(last_status.keys())
    # –û—Ç–±–æ–∏ —Ç—Ä–µ–≤–æ–≥: —Ä–µ–≥–∏–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã —Ä–∞–Ω—å—à–µ, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã —Å–µ–π—á–∞—Å
    ended_alerts = set(last_status.keys()) - current_active_regions

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è *—Ç–∏–ø–∞* —Ç—Ä–µ–≤–æ–≥–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ---
    # changed_alerts = set()
    # for region_id in current_active_regions.intersection(set(last_status.keys())):
    #     # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–±–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ (–µ—Å–ª–∏ API –¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É –ø–æ —Ç–∏–ø–∞–º)
    #     last_active_types = {a['type'] for a in last_status[region_id].get('activeAlerts', [])}
    #     current_active_types = {a['type'] for a in current_status[region_id].get('activeAlerts', [])}
    #     if last_active_types != current_active_types:
    #         changed_alerts.add(region_id)
    # --------------------------------------------------------------------

    if not new_alerts and not ended_alerts: # and not changed_alerts:
        logger.info("No changes in air raid status.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ bot_data –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π,
        # —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É 'lastUpdate' –∏–∑ API
        context.bot_data[LAST_STATUS_KEY] = current_status
        return

    logger.info(f"Changes detected - New alerts: {len(new_alerts)}, Ended alerts: {len(ended_alerts)}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = db.get_subscribers()
    if not subscribers:
        logger.info("No subscribers found. No notifications sent.")
        context.bot_data[LAST_STATUS_KEY] = current_status # –í—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        return

    logger.info(f"Sending notifications to {len(subscribers)} subscribers...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    tasks = []
    for user_id in subscribers:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–≤–æ–≥–∞—Ö
        for region_id in new_alerts:
            region_data = current_status.get(region_id)
            if region_data:
                region_name = region_data.get('regionName', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–≥—ñ–æ–Ω')
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥–∞—Ö, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Ç–∏–ø –ø–µ—Ä–≤–æ–π
                alert_type = None
                active_alerts_in_region = region_data.get('activeAlerts', [])
                if active_alerts_in_region:
                    alert_type = active_alerts_in_region[0].get('type', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø') # –ü—Ä–∏–º–µ—Ä
                message = format_alert_message(region_name, alert_type)
                tasks.append(context.bot.send_message(chat_id=user_id, text=message, parse_mode=telegram.constants.ParseMode.MARKDOWN_V2))
                await asyncio.sleep(notification_delay) # –ó–∞–¥–µ—Ä–∂–∫–∞

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–±–æ–µ —Ç—Ä–µ–≤–æ–≥
        for region_id in ended_alerts:
            region_data = last_status.get(region_id) # –ë–µ—Ä–µ–º –∏–º—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            if region_data:
                region_name = region_data.get('regionName', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–≥—ñ–æ–Ω')
                message = format_no_alert_message(region_name)
                tasks.append(context.bot.send_message(chat_id=user_id, text=message, parse_mode=telegram.constants.ParseMode.MARKDOWN_V2))
                await asyncio.sleep(notification_delay) # –ó–∞–¥–µ—Ä–∂–∫–∞

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    results = await asyncio.gather(*tasks, return_exceptions=True)

    success_count = 0
    fail_count = 0
    for i, result in enumerate(results):
         original_task = tasks[i] # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, chat_id)
         # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ –∑–∞–¥–∞—á–∏ (–Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–µ–µ, —Ç.–∫. –æ–Ω –≤–Ω—É—Ç—Ä–∏ –≤—ã–∑–æ–≤–∞ send_message)
         # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—â–µ —Å–≤—è–∑–∞—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å —Ü–∏–∫–ª–æ–º –≤—ã—à–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å user_id
         # target_user_id = subscribers[i // (len(new_alerts) + len(ended_alerts))] # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫, –Ω–æ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–µ–µ

         if isinstance(result, Exception):
             fail_count += 1
             # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
             # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ user_id –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
             num_messages_per_user = len(new_alerts) + len(ended_alerts)
             if num_messages_per_user > 0:
                failed_user_index = i // num_messages_per_user
                if failed_user_index < len(subscribers):
                   failed_user_id = subscribers[failed_user_index]
                else:
                   failed_user_id = "unknown" # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

             if isinstance(result, (BadRequest, Forbidden)):
                 logger.warning(f"Failed to send notification to user {failed_user_id}: {result}. User might have blocked the bot.")
                 # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ Forbidden
                 if isinstance(result, Forbidden):
                     logger.info(f"Removing user {failed_user_id} due to Forbidden error.")
                     db.remove_subscriber(failed_user_id)
             else:
                 logger.error(f"Unexpected error sending notification to user {failed_user_id}: {result}")
         else:
             success_count += 1

    logger.info(f"Notifications sent. Success: {success_count}, Failed: {fail_count}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ bot_data –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    context.bot_data[LAST_STATUS_KEY] = current_status
    logger.info("Air raid status check finished.")