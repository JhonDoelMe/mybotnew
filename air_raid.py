import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from database import get_connection, get_user_settings, update_user_setting
from dotenv import load_dotenv
import logging
import json

load_dotenv()
logger = logging.getLogger(__name__)

ALERTS_API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"
ALERTS_API_TOKEN = os.getenv("ALERTS_IN_UA_TOKEN")

async def show_air_raid_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['notify_air_alerts'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        keyboard = [
            ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–≤–æ–≥–∏'],
            ['–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' if settings['notify_air_alerts'] else '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}",
            reply_markup=reply_markup
        )

async def check_air_raid(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥"""
    if not ALERTS_API_TOKEN:
        await update.message.reply_text("–û—à–∏–±–∫–∞: API-—Ç–æ–∫–µ–Ω –¥–ª—è alerts.in.ua –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    try:
        params = {"token": ALERTS_API_TOKEN}
        async with aiohttp.ClientSession() as session:
            async with session.get(ALERTS_API_URL, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 401:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π API-—Ç–æ–∫–µ–Ω –¥–ª—è alerts.in.ua")
                    return
                response.raise_for_status()
                alerts = await response.json()
                logger.info(f"API response: {alerts}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        if isinstance(alerts, str):
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ API: {alerts}")
            return
        elif not isinstance(alerts, list):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º alerts –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        active_alerts = [alert["region"] for alert in alerts if alert.get("enabled", False)]
        
        if active_alerts:
            message = "üö® –¢—Ä–µ–≤–æ–≥–∞ –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö:\n" + "\n".join(active_alerts)
        else:
            message = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥"
            
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Air raid error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥")

async def toggle_notifications(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        new_status = not settings['notify_air_alerts']
        update_user_setting(conn, user_id, 'notify_air_alerts', int(new_status))
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")