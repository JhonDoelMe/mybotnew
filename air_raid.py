import os
import aiohttp
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from database import get_connection, get_user_settings, update_user_setting
from dotenv import load_dotenv
import logging

load_dotenv()
logger = logging.getLogger(__name__)

ALERTS_API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"
ALERTS_API_TOKEN = os.getenv("ALERTS_IN_UA_TOKEN")

# –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π
OBLASTS = {
    "3": "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "4": "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "5": "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "8": "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "9": "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "10": "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "11": "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "12": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "13": "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "14": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "15": "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "16": "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "17": "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "18": "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "19": "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "20": "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "21": "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "22": "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "23": "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "24": "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "25": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "26": "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "27": "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "28": "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "29": "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º", "30": "–º. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "31": "–º. –ö–∏—ó–≤"
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –∏–∑ JSON
with open('locations.json', 'r', encoding='utf-8') as f:
    LOCATIONS = json.load(f)

async def show_air_raid_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings['notify_air_alerts'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        oblast = OBLASTS.get(settings['oblast_uid'], "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        location_uid = settings['location_uid']
        location = next((name for uid, name in LOCATIONS.get(settings['oblast_uid'], {}).items() 
                        if uid == location_uid), "–Ω–µ –≤—ã–±—Ä–∞–Ω") if location_uid else "–Ω–µ –≤—ã–±—Ä–∞–Ω"
        
        keyboard = [
            ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–≤–æ–≥–∏'],
            ['–í—ã–±—Ä–∞—Ç—å –æ–±–ª–∞—Å—Ç—å'],
            ['–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'],
            ['–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' if settings['notify_air_alerts'] else '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
            ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}\n"
            f"–û–±–ª–∞—Å—Ç—å: {oblast}\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {location}",
            reply_markup=reply_markup
        )
    return settings

async def select_oblast(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    keyboard = [[oblast] for oblast in OBLASTS.values()]
    keyboard.append(['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥'])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:", reply_markup=reply_markup)
    context.user_data['awaiting_oblast'] = True

async def select_location(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        oblast_uid = settings['oblast_uid']
    
    if not oblast_uid:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å!")
        return
    
    locations = LOCATIONS.get(oblast_uid, {})
    if not locations:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.")
        return
    
    keyboard = [[name] for name in locations.values()]
    keyboard.append(['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥'])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≥—Ä–æ–º–∞–¥—É:", reply_markup=reply_markup)
    context.user_data['awaiting_location'] = True

async def check_air_raid(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–≤–æ–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    if not ALERTS_API_TOKEN:
        await update.message.reply_text("–û—à–∏–±–∫–∞: API-—Ç–æ–∫–µ–Ω –¥–ª—è alerts.in.ua –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        location_uid = settings['location_uid']
    
    try:
        params = {"token": ALERTS_API_TOKEN}
        async with aiohttp.ClientSession() as session:
            async with session.get(ALERTS_API_URL, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 401:
                    await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π API-—Ç–æ–∫–µ–Ω –¥–ª—è alerts.in.ua")
                    return
                response.raise_for_status()
                data = await response.json()
        
        alerts = data.get("alerts", [])
        if not location_uid:  # –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏
            active_alerts = [alert["location_title"] for alert in alerts if alert.get("finished_at") is None]
        else:  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            active_alerts = [alert["location_title"] for alert in alerts 
                            if alert.get("finished_at") is None and alert.get("location_uid") == location_uid]
        
        if active_alerts:
            message = "üö® –¢—Ä–µ–≤–æ–≥–∞ –≤:\n" + "\n".join(active_alerts)
        else:
            message = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"
            
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Air raid error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥")

async def toggle_notifications(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        new_status = not settings['notify_air_alerts']
        update_user_setting(conn, user_id, 'notify_air_alerts', int(new_status))
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        await show_air_raid_menu(update, context)

async def handle_air_raid_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏ –∏ –≥–æ—Ä–æ–¥–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if 'awaiting_oblast' in context.user_data:
        oblast_uid = next((uid for uid, name in OBLASTS.items() if name == text), None)
        if oblast_uid:
            with get_connection() as conn:
                update_user_setting(conn, user_id, 'oblast_uid', oblast_uid)
                update_user_setting(conn, user_id, 'location_uid', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥
                conn.commit()
            await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å: {text}")
            del context.user_data['awaiting_oblast']
            settings = await show_air_raid_menu(update, context)
            logger.info(f"After oblast selection, settings: {settings}")
        elif text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥':
            del context.user_data['awaiting_oblast']
            await show_air_raid_menu(update, context)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞!")
    
    elif 'awaiting_location' in context.user_data:
        with get_connection() as conn:
            settings = get_user_settings(conn, user_id)
            oblast_uid = settings['oblast_uid']
        
        locations = LOCATIONS.get(oblast_uid, {})
        location_uid = next((uid for uid, name in locations.items() if name == text), None)
        
        if location_uid:
            with get_connection() as conn:
                update_user_setting(conn, user_id, 'location_uid', location_uid)
                conn.commit()
            await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {text}")
            del context.user_data['awaiting_location']
            settings = await show_air_raid_menu(update, context)
            logger.info(f"After location selection, settings: {settings}")
        elif text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç—Ä–µ–≤–æ–≥':
            del context.user_data['awaiting_location']
            await show_air_raid_menu(update, context)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞!")
    
    else:
        if text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–≤–æ–≥–∏':
            await check_air_raid(update, context)
        elif text == '–í—ã–±—Ä–∞—Ç—å –æ–±–ª–∞—Å—Ç—å':
            await select_oblast(update, context)
        elif text == '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥':
            await select_location(update, context)
        elif text in ('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'):
            await toggle_notifications(update, context)
        elif text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            from button_handlers import main_reply_markup
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_reply_markup)
            context.user_data.clear()