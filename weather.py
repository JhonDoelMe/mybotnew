import os
import aiohttp
import logging
from typing import Dict, Optional
from cachetools import TTLCache
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from database import get_connection, get_user_settings, update_user_setting
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
WEATHER_API_URL = "https://api.openweathermap.org/data/2.5/weather"
WEATHER_API_KEY = os.getenv("OPENWEATHERMAP_API_KEY")

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 10 –º–∏–Ω—É—Ç
WEATHER_CACHE = TTLCache(maxsize=500, ttl=600)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_RETRIES = 3
REQUEST_TIMEOUT = 10

class WeatherAPI:
    @staticmethod
    async def get_weather_data(city: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not WEATHER_API_KEY:
            raise ValueError("API key not configured")
            
        cache_key = city.lower()
        if cache_key in WEATHER_CACHE:
            return WEATHER_CACHE[cache_key]
            
        params = {
            "q": city,
            "appid": WEATHER_API_KEY,
            "units": "metric",
            "lang": "ru"
        }
        
        async with aiohttp.ClientSession() as session:
            for attempt in range(MAX_RETRIES):
                try:
                    async with session.get(
                        WEATHER_API_URL,
                        params=params,
                        timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
                    ) as response:
                        if response.status == 404:
                            return None
                        response.raise_for_status()
                        data = await response.json()
                        WEATHER_CACHE[cache_key] = data
                        return data
                except Exception as e:
                    logger.warning(f"Attempt {attempt + 1} failed: {e}")
                    if attempt == MAX_RETRIES - 1:
                        raise

async def get_weather(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É"""
    if not WEATHER_API_KEY:
        await update.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        city = settings['city']
    
    if not city:
        await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥'")
        return
    
    try:
        data = await WeatherAPI.get_weather_data(city)
        if not data:
            await update.message.reply_text(f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        weather = data['weather'][0]
        main = data['main']
        wind = data['wind']
        
        message = (
            f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:\n\n"
            f"‚òÅÔ∏è {weather['description'].capitalize()}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main['temp']:.1f}¬∞C\n"
            f"ü•∂ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {main['feels_like']:.1f}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {main['humidity']}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind['speed']} –º/—Å, {_deg_to_direction(wind.get('deg', 0))}\n"
            f"üåÑ –î–∞–≤–ª–µ–Ω–∏–µ: {main['pressure']} hPa"
        )
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")

def _deg_to_direction(deg: int) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≥—Ä–∞–¥—É—Å—ã –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞"""
    directions = ["–°–µ–≤–µ—Ä–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", 
                 "–Æ–∂–Ω—ã–π", "–Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–ó–∞–ø–∞–¥–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"]
    idx = round(deg / 45) % 8
    return directions[idx]

async def handle_city_change(update: Update, context: CallbackContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã"""
    await update.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    context.user_data['awaiting_city'] = True

async def handle_city_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = update.effective_user.id
    city = update.message.text.strip()
    
    if len(city) < 2:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
        return
    
    with get_connection() as conn:
        update_user_setting(conn, user_id, 'city', city)
    
    await update.message.reply_text(f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
    context.user_data.pop('awaiting_city', None)
    await show_weather_menu(update, context)

async def show_weather_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–≥–æ–¥—ã"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        city_status = settings['city'] or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    keyboard = [
        ['üåû –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞'],
        ['üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥'],
        ['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üå§Ô∏è –ú–µ–Ω—é –ø–æ–≥–æ–¥—ã\n\n"
        f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {city_status}",
        reply_markup=reply_markup
    )