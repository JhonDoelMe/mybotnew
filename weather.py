import os
import aiohttp
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from database import get_connection, get_user_settings
from dotenv import load_dotenv
import logging

load_dotenv()
logger = logging.getLogger(__name__)

WEATHER_API_URL = "https://api.openweathermap.org/data/2.5/weather"
WEATHER_API_KEY = os.getenv("OPENWEATHERMAP_API_KEY")

async def get_weather(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É"""
    if not WEATHER_API_KEY:
        await update.message.reply_text("–û—à–∏–±–∫–∞: API-–∫–ª—é—á –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        city = settings['city']
    
    try:
        params = {
            "q": city,
            "appid": WEATHER_API_KEY,
            "units": "metric",
            "lang": "ru"
        }
        async with aiohttp.ClientSession() as session:
            async with session.get(WEATHER_API_URL, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 404:
                    await update.message.reply_text(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                response.raise_for_status()
                data = await response.json()
        
        description = data['weather'][0]['description'].capitalize()
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        wind_speed = data['wind']['speed']
        wind_deg = data['wind'].get('deg', 0)
        
        wind_direction = deg_to_direction(wind_deg)
        
        message = (
            f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"ü•∂ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_direction}"
        )
        
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"Weather error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")

def deg_to_direction(deg):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞"""
    directions = ["–°–µ–≤–µ—Ä", "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫", "–í–æ—Å—Ç–æ–∫", "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫", 
                  "–Æ–≥", "–Æ–≥–æ-–∑–∞–ø–∞–¥", "–ó–∞–ø–∞–¥", "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥"]
    idx = round(deg / 45) % 8
    return directions[idx]

async def handle_city_change(update: Update, context: CallbackContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã"""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    context.user_data['awaiting_city'] = True

async def show_weather_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–≥–æ–¥—ã"""
    keyboard = [['üåû –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞'], ['üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥'], ['‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ú–µ–Ω—é –ø–æ–≥–æ–¥—ã", reply_markup=reply_markup)