# weather.py
import requests
import json
import logging
from typing import Optional, Dict, Any

import telegram # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è telegram.helpers
from telegram import helpers # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è telegram.helpers
from telegram.ext import ContextTypes
from telegram.constants import ParseMode # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è ParseMode

import config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å config
from constants import DEFAULT_CITY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL API OpenWeatherMap
WEATHER_API_URL = "http://api.openweathermap.org/data/2.5/weather"

def get_weather(city: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å OpenWeatherMap API.

    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.

    Returns:
        Optional[Dict[str, Any]]: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    api_key = config.cfg.get('WEATHER_API_KEY')
    if not api_key:
        logger.error("Weather API key (WEATHER_API_KEY) not configured.")
        return None

    params = {
        'q': city,
        'appid': api_key,
        'units': 'metric', # –ì—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
        'lang': 'uk' # –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ - —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
    }

    try:
        response = requests.get(WEATHER_API_URL, params=params, timeout=10)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (–∫—Ä–æ–º–µ 404, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ)

        if response.status_code == 200:
            try:
                data = response.json()
                if isinstance(data, dict):
                    return data
                else:
                    logger.error(f"Weather API returned unexpected data type: {type(data)}. Expected dict.")
                    return None
            except json.JSONDecodeError as e:
                logger.error(f"Failed to decode JSON response from Weather API: {e}")
                logger.debug(f"Response text: {response.text}")
                return None
            except Exception as e:
                 logger.error(f"An unexpected error occurred during JSON processing: {e}")
                 return None
        else:
            # –≠—Ç–∞ –≤–µ—Ç–∫–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∏–∑-–∑–∞ raise_for_status, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
            logger.error(f"Weather API request failed with status code {response.status_code}: {response.text}")
            return None

    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 404:
            logger.warning(f"City '{city}' not found by Weather API.")
            return {'cod': '404', 'message': 'city not found'}
        elif e.response.status_code == 401:
            logger.error(f"Weather API request failed: Invalid API key or not authorized. {e}")
            return None
        else:
             logger.error(f"HTTP error fetching weather for {city}: {e}")
             return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Network error fetching weather for {city}: {e}")
        return None
    except Exception as e:
        logger.error(f"An unexpected error occurred in get_weather for {city}: {e}")
        return None


def format_weather_message(weather_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è ParseMode.MARKDOWN_V2.

    Args:
        weather_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç API OpenWeatherMap.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not weather_data or weather_data.get('cod') != 200:
        if weather_data and weather_data.get('cod') == '404':
            # –¢–æ—á–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç.–∫. –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown V2 –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            return "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è —Ç–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É."
        # –¢–æ—á–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É."

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–ª–ø–µ—Ä –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    city_name = helpers.escape_markdown(weather_data.get('name', '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ'), version=2)
    main_info = weather_data.get('main', {})
    weather_desc_list = weather_data.get('weather', [])
    wind_info = weather_data.get('wind', {})

    temp = main_info.get('temp')
    feels_like = main_info.get('feels_like')
    humidity = main_info.get('humidity')
    pressure_hpa = main_info.get('pressure')
    wind_speed = wind_info.get('speed')

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    description = helpers.escape_markdown(
        weather_desc_list[0].get('description', '–Ω–µ–≤—ñ–¥–æ–º–æ') if weather_desc_list else '–Ω–µ–≤—ñ–¥–æ–º–æ',
        version=2
    )
    icon_code = weather_desc_list[0].get('icon', '') if weather_desc_list else ''

    weather_icons = {
        "01d": "‚òÄÔ∏è", "01n": "üåô", "02d": "‚õÖÔ∏è", "02n": "‚òÅÔ∏è", "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
        "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è", "09d": "üå¶", "09n": "üåß", "10d": "üåß", "10n": "üåß",
        "11d": "‚õà", "11n": "‚õà", "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è", "50d": "üå´", "50n": "üå´",
    }
    weather_emoji = weather_icons.get(icon_code, "")

    pressure_mmhg = int(pressure_hpa * 0.750062) if pressure_hpa is not None else None

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
    def format_and_escape(value: Optional[float], precision: int = 1) -> str:
        if value is None:
            return "N/A"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é, –∑–∞–º–µ–Ω—è–µ–º '.' –Ω–∞ '\.'
        return f"{value:.{precision}f}".replace('.', '\\.')

    message = f"*–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ* {city_name}:\n\n"
    message += f"{weather_emoji} {description.capitalize()}\n"
    if temp is not None:
        message += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{format_and_escape(temp)}¬∞C`\n"
    if feels_like is not None:
        message += f"   –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: `{format_and_escape(feels_like)}¬∞C`\n"
    if humidity is not None:
        # –î–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª —Ç–æ—á–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        message += f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: `{humidity}%`\n"
    if pressure_mmhg is not None:
        # –î–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª —Ç–æ—á–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        message += f"üìä –¢–∏—Å–∫: `{pressure_mmhg} –º–º —Ä—Ç\\. —Å—Ç\\.`\n" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤ "–º–º —Ä—Ç. —Å—Ç."
    if wind_speed is not None:
        message += f"üí® –í—ñ—Ç–µ—Ä: `{format_and_escape(wind_speed)} –º/—Å`\n"

    return message.strip()


async def get_weather_command(update: telegram.Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã.
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.
    """
    if not update.message:
        logger.warning("get_weather_command called without update.message")
        return

    city = " ".join(context.args) if context.args else None

    if not city:
        city = DEFAULT_CITY
        logger.info(f"City not provided, using default: {city}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # plain_text_request = f"–ü–æ–∫–∞–∑—É—é –ø–æ–≥–æ–¥—É –¥–ª—è {city}. –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É –¥–ª—è —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ç–∞, –Ω–∞–ø–∏—à—ñ—Ç—å '/weather –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞'"
        # await update.message.reply_text(plain_text_request)


    if city:
        weather_data = get_weather(city)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–∂–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è MarkdownV2)
        message = format_weather_message(weather_data)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º parse_mode –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        parse_mode = None
        if weather_data and weather_data.get('cod') == 200:
            parse_mode = ParseMode.MARKDOWN_V2

        try:
            await update.message.reply_text(message, parse_mode=parse_mode)
        except telegram.error.TelegramError as e:
            logger.error(f"Error sending weather message (parse_mode={parse_mode}): {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å MarkdownV2
            if parse_mode == ParseMode.MARKDOWN_V2:
                try:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    plain_message = message.replace('\\.', '.')\
                                           .replace('\\*', '*')\
                                           .replace('\\`', '`') # –∏ —Ç.–¥. –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                    # –ü—Ä–æ—â–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ –±–µ–∑ Markdown
                    plain_message = format_weather_message_plain(weather_data) # –ù—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                    await update.message.reply_text(plain_message)
                    logger.info("Sent weather message without markdown due to previous error.")
                except telegram.error.TelegramError as final_e:
                    logger.error(f"Failed to send weather message even without markdown: {final_e}")
                    await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≥–æ–¥–∏.") # –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            else:
                 # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                 await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≥–æ–¥–∏.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
def format_weather_message_plain(weather_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    if not weather_data or weather_data.get('cod') != 200:
        if weather_data and weather_data.get('cod') == '404':
            return "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è —Ç–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É."
        return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É."

    city_name = weather_data.get('name', '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ')
    main_info = weather_data.get('main', {})
    weather_desc_list = weather_data.get('weather', [])
    wind_info = weather_data.get('wind', {})

    temp = main_info.get('temp')
    feels_like = main_info.get('feels_like')
    humidity = main_info.get('humidity')
    pressure_hpa = main_info.get('pressure')
    wind_speed = wind_info.get('speed')

    description = weather_desc_list[0].get('description', '–Ω–µ–≤—ñ–¥–æ–º–æ') if weather_desc_list else '–Ω–µ–≤—ñ–¥–æ–º–æ'
    icon_code = weather_desc_list[0].get('icon', '') if weather_desc_list else ''

    weather_icons = {"01d": "‚òÄÔ∏è", "01n": "üåô", "02d": "‚õÖÔ∏è", "02n": "‚òÅÔ∏è", "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è", "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è", "09d": "üå¶", "09n": "üåß", "10d": "üåß", "10n": "üåß", "11d": "‚õà", "11n": "‚õà", "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è", "50d": "üå´", "50n": "üå´"}
    weather_emoji = weather_icons.get(icon_code, "")
    pressure_mmhg = int(pressure_hpa * 0.750062) if pressure_hpa is not None else None

    message = f"–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ {city_name}:\n\n"
    message += f"{weather_emoji} {description.capitalize()}\n"
    if temp is not None: message += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C\n"
    if feels_like is not None: message += f"   –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {feels_like:.1f}¬∞C\n"
    if humidity is not None: message += f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n"
    if pressure_mmhg is not None: message += f"üìä –¢–∏—Å–∫: {pressure_mmhg} –º–º —Ä—Ç. —Å—Ç.\n"
    if wind_speed is not None: message += f"üí® –í—ñ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å\n"

    return message.strip()