# tcc_news.py
import json
import os
from datetime import datetime, timedelta
from telethon import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_API_ID = os.getenv("TELEGRAM_API_ID")
TELEGRAM_API_HASH = os.getenv("TELEGRAM_API_HASH")

CONFIG_FILE = 'config.json'
PROCESSED_NEWS = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–¥—É–ª—è "–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö"
tcc_news_keyboard = [['–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'], ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
tcc_news_reply_markup = ReplyKeyboardMarkup(tcc_news_keyboard, resize_keyboard=True)

def show_tcc_news_menu(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π –¢–¶–ö."""
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=tcc_news_reply_markup)

async def get_channel_messages(client, channel_id, since_date):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã."""
    try:
        channel = await client.get_entity(channel_id)
        all_messages = []
        async for message in client.iter_messages(channel, limit=None, reverse=True, from_date=since_date):
            all_messages.append(message)
        return all_messages
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        return []

def get_tcc_news(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¢–¶–ö –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –¥–Ω—è."""
    async def main():
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)

            target_chat_id = config.get('target_chat_id')
            telegram_channels = config.get('telegram_channels', [])

            if not target_chat_id or not telegram_channels:
                update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                return

            if not TELEGRAM_API_ID or not TELEGRAM_API_HASH:
                update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω—ã TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH –≤ —Ñ–∞–π–ª–µ .env.")
                return

            client = TelegramClient('session_name', int(TELEGRAM_API_ID), TELEGRAM_API_HASH)
            await client.connect()

            if not await client.is_connected():
                update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram.")
                return

            three_days_ago = datetime.now() - timedelta(days=3)
            found_news = []

            for channel_info in telegram_channels:
                channel_id = channel_info.get('channel_id')
                keywords = channel_info.get('keywords', [])
                if channel_id and keywords:
                    messages = await get_channel_messages(client, channel_id, three_days_ago)
                    for message in messages:
                        if message.text:
                            for keyword in keywords:
                                if keyword.lower() in message.text.lower() and message.text not in PROCESSED_NEWS:
                                    found_news.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {channel_id}\n{message.text}\n\n")
                                    PROCESSED_NEWS.add(message.text) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                                    break # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –µ—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ

            await client.disconnect()

            if found_news:
                news_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¢–¶–ö –∑–∞ —Ç—Ä–∏ –¥–Ω—è:\n\n" + "\n".join(found_news)
                try:
                    await context.bot.send_message(chat_id=target_chat_id, text=news_text)
                    update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                except Exception as e:
                    update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            else:
                update.message.reply_text("–°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¢–¶–ö –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except FileNotFoundError:
            update.message.reply_text("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 'config.json' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except json.JSONDecodeError:
            update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 'config.json'.")
        except Exception as e:
            update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¢–¶–ö: {e}")

    import asyncio
    asyncio.run(main())