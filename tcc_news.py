from telethon import TelegramClient
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from database import get_connection, log_news_processed, is_news_processed
from datetime import datetime, timedelta
import json
import os
from dotenv import load_dotenv
import logging

load_dotenv()
logger = logging.getLogger(__name__)

TELEGRAM_API_ID = os.getenv("TELEGRAM_API_ID")
TELEGRAM_API_HASH = os.getenv("TELEGRAM_API_HASH")
CONFIG_FILE = 'config.json'

async def show_tcc_news_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π"""
    keyboard = [
        ['–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'],
        ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö:", reply_markup=reply_markup)

async def get_tcc_news(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¢–¶–ö"""
    user_id = update.effective_user.id
    
    if not TELEGRAM_API_ID or not TELEGRAM_API_HASH:
        await update.message.reply_text("–û—à–∏–±–∫–∞: API Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    try:
        if not os.path.exists(CONFIG_FILE):
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        with open(CONFIG_FILE) as f:
            config = json.load(f)
        
        if not isinstance(config.get('telegram_channels'), list):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: 'telegram_channels' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
        
        client = TelegramClient('session', TELEGRAM_API_ID, TELEGRAM_API_HASH)
        await client.start()
        
        three_days_ago = datetime.now() - timedelta(days=3)
        news_messages = []
        
        with get_connection() as conn:
            for channel in config['telegram_channels']:
                async for message in client.iter_messages(channel['channel_id'], offset_date=three_days_ago, limit=50):
                    if message.text and not is_news_processed(conn, user_id, message.text):
                        if any(kw.lower() in message.text.lower() for kw in channel['keywords']):
                            news_messages.append(message.text)
                            log_news_processed(conn, user_id, channel['channel_id'], message.text)
                            if len(news_messages) >= 5:
                                break
        
        if news_messages:
            message = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n" + "\n\n".join(news_messages[:5])
            await update.message.reply_text(message[:4000])
        else:
            await update.message.reply_text("–ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        await client.disconnect()
    except Exception as e:
        logger.error(f"News error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")