from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
import logging
from typing import Dict, Any

logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = [
    ['üå§Ô∏è –ü–æ–≥–æ–¥–∞', 'üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç'],
    ['üö® –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞']
]
main_reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)

class ButtonHandler:
    @staticmethod
    async def handle_main_menu(update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = update.message.text.lower()
        
        if any(word in text for word in ['–ø–æ–≥–æ–¥–∞', 'üå§Ô∏è']):
            context.user_data['current_module'] = 'weather'
            await weather.show_weather_menu(update, context)
        elif any(word in text for word in ['–∫—É—Ä—Å', '–≤–∞–ª—é—Ç–∞', 'üíµ']):
            context.user_data['current_module'] = 'currency'
            await currency.show_currency_menu(update, context)
        elif any(word in text for word in ['—Ç—Ä–µ–≤–æ–≥–∞', 'üö®']):
            context.user_data['current_module'] = 'air_raid'
            await air_raid.show_air_raid_menu(update, context)
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=main_reply_markup
            )

    @staticmethod
    async def handle_weather_buttons(update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–≥–æ–¥—ã"""
        try:
            text = update.message.text
            
            if text == 'üåû –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞':
                await weather.get_weather(update, context)
            elif text == 'üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥':
                await weather.handle_city_change(update, context)
            elif text == '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                await ButtonHandler.return_to_main_menu(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≥–æ–¥—ã: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
                reply_markup=main_reply_markup
            )

    @staticmethod
    async def handle_currency_buttons(update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤–∞–ª—é—Ç"""
        try:
            text = update.message.text
            
            if text in ('üí≤ USD', '‚Ç¨ EUR'):
                await currency.get_exchange_rate(update, context)
            elif text == 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É':
                await currency.show_currency_menu(update, context)
            elif text == '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                await ButtonHandler.return_to_main_menu(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–ª—é—Ç: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
                reply_markup=main_reply_markup
            )

    @staticmethod
    async def handle_air_raid_buttons(update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ç—Ä–µ–≤–æ–≥"""
        try:
            text = update.message.text
            
            if text == 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–≤–æ–≥–∏':
                await air_raid.check_air_raid(update, context)
            elif text == 'üåç –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω':
                await air_raid.select_region(update, context)
            elif text in ('üîî –í–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üîï –í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'):
                await air_raid.toggle_notifications(update, context)
            elif text == '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                await ButtonHandler.return_to_main_menu(update, context)
            elif context.user_data.get('awaiting_region'):
                await air_raid.handle_region_selection(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–≤–æ–≥: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
                reply_markup=main_reply_markup
            )

    @staticmethod
    async def return_to_main_menu(update: Update, context: CallbackContext):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        context.user_data.clear()
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_reply_markup
        )

async def handle_module_buttons(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–æ–¥—É–ª–µ–π"""
    current_module = context.user_data.get('current_module')
    
    if not current_module:
        await ButtonHandler.handle_main_menu(update, context)
        return
    
    try:
        if current_module == 'weather':
            await ButtonHandler.handle_weather_buttons(update, context)
        elif current_module == 'currency':
            await ButtonHandler.handle_currency_buttons(update, context)
        elif current_module == 'air_raid':
            await ButtonHandler.handle_air_raid_buttons(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥—É–ª—è: {e}")
        await ButtonHandler.return_to_main_menu(update, context)