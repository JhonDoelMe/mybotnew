import pytest
import asyncio
from unittest.mock import AsyncMock, patch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from air_raid import get_air_raid_status, format_alert_message, format_no_alert_message

@pytest.mark.asyncio
async def test_get_air_raid_status_success():
    mock_response = [
        {"regionId": "1", "regionName": "–ö–∏—ó–≤", "activeAlerts": [{"type": "air_raid"}]},
    ]
    with patch('requests.get') as mock_get:
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = mock_response
        mock_get.return_value.headers = {'Last-Modified': '2023-01-01T00:00:00Z'}
        result = await get_air_raid_status()
        assert result == mock_response

@pytest.mark.asyncio
async def test_get_air_raid_status_not_modified():
    mock_context = AsyncMock()
    mock_context.bot_data = {
        'last_alert_status': {
            'data': [{"regionId": "1", "regionName": "–ö–∏—ó–≤"}],
            'lastUpdate': '2023-01-01T00:00:00Z'
        }
    }
    with patch('requests.get') as mock_get:
        mock_get.return_value.status_code = 304
        result = await get_air_raid_status(mock_context)
        assert result == [{"regionId": "1", "regionName": "–ö–∏—ó–≤"}]

def test_format_alert_message():
    assert format_alert_message("–ö–∏—ó–≤", "air_raid") == "üö® –£–í–ê–ì–ê! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ **–ö–∏—ó–≤**! (air_raid)\n–ü—Ä—è–º—É–π—Ç–µ –¥–æ —É–∫—Ä–∏—Ç—Ç—è!"
    assert format_alert_message("–õ—å–≤—ñ–≤") == "üö® –£–í–ê–ì–ê! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –≤ **–õ—å–≤—ñ–≤**!\n–ü—Ä—è–º—É–π—Ç–µ –¥–æ —É–∫—Ä–∏—Ç—Ç—è!"

def test_format_no_alert_message():
    assert format_no_alert_message("–ö–∏—ó–≤") == "‚úÖ –í—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –≤ **–ö–∏—ó–≤**."