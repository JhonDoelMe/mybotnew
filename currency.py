# currency.py
import requests
import json
import logging
from typing import Optional, List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL API –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –Ω–∞–ª–∏—á–Ω–æ–π –≤–∞–ª—é—Ç—ã
PRIVAT_API_URL = "https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=5"

def get_currency_rates() -> Optional[List[Dict[str, Any]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å API –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞.

    Returns:
        Optional[List[Dict[str, Any]]]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫—É—Ä—Å–∞—Ö –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        response = requests.get(PRIVAT_API_URL, timeout=10)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏

        if response.status_code == 200:
            try:
                data = response.json()
                if isinstance(data, list):
                    return data
                else:
                    logger.error(f"Currency API returned unexpected data type: {type(data)}. Expected list.")
                    return None
            except json.JSONDecodeError as e:
                logger.error(f"Failed to decode JSON response from Currency API: {e}")
                logger.debug(f"Response text: {response.text}")
                return None
            except Exception as e:
                 logger.error(f"An unexpected error occurred during JSON processing: {e}")
                 return None
        else:
            logger.error(f"Currency API request failed with status code {response.status_code}: {response.text}")
            return None

    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching currency rates: {e}")
        return None
    except Exception as e:
        logger.error(f"An unexpected error occurred in get_currency_rates: {e}")
        return None

def format_currency_message(rates: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç.

    Args:
        rates: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫—É—Ä—Å–∞—Ö.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not rates:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç."

    message = "–ö—É—Ä—Å –≤–∞–ª—é—Ç (–≥–æ—Ç—ñ–≤–∫–∞, –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫):\n\n"
    for rate in rates:
        ccy = rate.get('ccy')
        base_ccy = rate.get('base_ccy')
        buy = rate.get('buy')
        sale = rate.get('sale')
        if ccy and base_ccy and buy and sale:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ USD –∏ EUR –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            if ccy in ['USD', 'EUR']:
                 message += f"üá∫üá∏ {ccy}/{base_ccy}:\n" \
                           f"   –ö—É–ø—ñ–≤–ª—è: {float(buy):.2f}\n" \
                           f"   –ü—Ä–æ–¥–∞–∂:  {float(sale):.2f}\n\n"

    return message.strip()

async def get_currency_command(update: telegram.Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç."""
    rates = get_currency_rates()
    if rates:
        message = format_currency_message(rates)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç.")