import os
import aiohttp
import logging
from typing import Dict, Optional
from cachetools import TTLCache
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from database import get_connection, get_user_settings, update_user_setting
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
CURRENCY_API_URL = "https://api.exchangerate-api.com/v4/latest/UAH"
CURRENCY_API_KEY = os.getenv("CURRENCY_API_KEY")

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 1 —á–∞—Å
CURRENCY_CACHE = TTLCache(maxsize=10, ttl=3600)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
SUPPORTED_CURRENCIES = {
    'USD': 'üíµ –î–æ–ª–ª–∞—Ä –°–®–ê',
    'EUR': '‚Ç¨ –ï–≤—Ä–æ',
    'PLN': 'üáµüá± –ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π',
    'GBP': 'üá¨üáß –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤'
}

class CurrencyAPI:
    @staticmethod
    async def get_exchange_rates() -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
        if not CURRENCY_API_KEY:
            raise ValueError("API key not configured")
            
        if 'rates' in CURRENCY_CACHE:
            return CURRENCY_CACHE['rates']
            
        headers = {"Authorization": f"Bearer {CURRENCY_API_KEY}"} if CURRENCY_API_KEY else {}
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(
                    CURRENCY_API_URL,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    response.raise_for_status()
                    data = await response.json()
                    CURRENCY_CACHE['rates'] = data['rates']
                    return data['rates']
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
                return None

async def get_exchange_rate(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
        text = update.message.text
        if text in ('üí≤ USD', '‚Ç¨ EUR'):
            currency = text.split()[1] if text.startswith('‚Ç¨') else 'USD'
        else:
            currency = settings['currency_preference']

    if currency not in SUPPORTED_CURRENCIES:
        await update.message.reply_text("‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return
    
    try:
        rates = await CurrencyAPI.get_exchange_rates()
        if not rates:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
            
        rate = rates.get(currency)
        if not rate:
            raise ValueError(f"–ö—É—Ä—Å –¥–ª—è {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        await update.message.reply_text(
            f"{SUPPORTED_CURRENCIES[currency]}\n"
            f"‚û°Ô∏è 1 {currency} = {float(rate):.2f} UAH\n"
            f"‚¨ÖÔ∏è 1 UAH = {1/float(rate):.4f} {currency}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")

async def show_currency_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–∞–ª—é—Ç"""
    user_id = update.effective_user.id
    with get_connection() as conn:
        settings = get_user_settings(conn, user_id)
        currency_status = settings['currency_preference']
    
    keyboard = [
        ['üí≤ USD', '‚Ç¨ EUR'],
        ['üáµüá± PLN', 'üá¨üáß GBP'],
        ['üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É'],
        ['‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üí± –ú–µ–Ω—é –≤–∞–ª—é—Ç\n\n"
        f"–¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: {SUPPORTED_CURRENCIES.get(currency_status, currency_status)}",
        reply_markup=reply_markup
    )

async def handle_currency_change(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
    text = update.message.text
    if text == 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É':
        await _show_currency_selection(update)
    elif text in SUPPORTED_CURRENCIES:
        user_id = update.effective_user.id
        currency = text.split()[1] if text.startswith('‚Ç¨') else text.split()[0]
        
        with get_connection() as conn:
            update_user_setting(conn, user_id, 'currency_preference', currency)
            await update.message.reply_text(
                f"‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {SUPPORTED_CURRENCIES[currency]}"
            )
            await show_currency_menu(update, context)

async def _show_currency_selection(update: Update):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"""
    keyboard = [
        ['üí≤ USD', '‚Ç¨ EUR'],
        ['üáµüá± PLN', 'üá¨üáß GBP'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –≤–∞–ª—é—Ç—É:",
        reply_markup=reply_markup
    )