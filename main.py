import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv
from button_handlers import main_reply_markup, handle_module_buttons
from weather import show_weather_menu, get_weather, handle_city_change
from currency import show_currency_menu, get_exchange_rate
from air_raid import show_air_raid_menu, check_air_raid, toggle_notifications, select_oblast, select_location, handle_air_raid_input

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_reply_markup  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏ –∏–∑ button_handlers
    )

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    current_module = context.user_data.get('current_module')

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == 'üå§Ô∏è –ü–æ–≥–æ–¥–∞' or text == '–ü–æ–≥–æ–¥–∞':
        context.user_data['current_module'] = 'weather'
        await show_weather_menu(update, context)
    elif text == 'üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç' or text == '–ö—É—Ä—Å –≤–∞–ª—é—Ç':
        context.user_data['current_module'] = 'currency'
        await show_currency_menu(update, context)
    elif text == 'üö® –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞' or text == '–í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞':
        context.user_data['current_module'] = 'air_raid'
        await show_air_raid_menu(update, context)
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤—Ä—É—á–Ω—É—é
    elif text == '–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö':
        await update.message.reply_text("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.", reply_markup=main_reply_markup)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é
    elif current_module:
        await handle_module_buttons(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_reply_markup)

async def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    try:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()