import os
import logging
import asyncio
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler
)
from dotenv import load_dotenv
from button_handlers import main_reply_markup, handle_module_buttons
from weather import (
    show_weather_menu,
    get_weather,
    handle_city_change,
    handle_city_input
)
from currency import show_currency_menu, get_exchange_rate, handle_currency_change
from air_raid import (
    show_air_raid_menu,
    check_air_raid,
    toggle_notifications,
    select_region,
    handle_region_selection
)
from database import init_db

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WEATHER_CITY, CURRENCY_SELECTION, AIR_RAID_REGION = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:\n"
        "- üå§Ô∏è –ü–æ–≥–æ–¥–µ\n"
        "- üíµ –ö—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç\n"
        "- üö® –í–æ–∑–¥—É—à–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥–∞—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_reply_markup
    )

async def handle_message(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        if context.user_data.get('awaiting_city'):
            await handle_city_input(update, context)
            return
        elif context.user_data.get('awaiting_region'):
            await handle_region_selection(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text in ['üå§Ô∏è –ü–æ–≥–æ–¥–∞', 'üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç', 'üö® –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞']:
            await handle_module_selection(update, context)
        else:
            await handle_module_buttons(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_reply_markup
        )

async def handle_module_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è"""
    text = update.message.text
    
    if text == 'üå§Ô∏è –ü–æ–≥–æ–¥–∞':
        context.user_data['current_module'] = 'weather'
        await show_weather_menu(update, context)
    elif text == 'üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç':
        context.user_data['current_module'] = 'currency'
        await show_currency_menu(update, context)
    elif text == 'üö® –í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞':
        context.user_data['current_module'] = 'air_raid'
        await show_air_raid_menu(update, context)

async def error_handler(update: Update, context: CallbackContext):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)
    
    if update and update.message:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.",
            reply_markup=main_reply_markup
        )

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))
    
    # ConversationHandler –¥–ª—è –ø–æ–≥–æ–¥—ã
    weather_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r'^(üå§Ô∏è –ü–æ–≥–æ–¥–∞|–ü–æ–≥–æ–¥–∞)$'), handle_module_selection)],
        states={
            WEATHER_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_input)]
        },
        fallbacks=[CommandHandler("start", start)],
        map_to_parent={
            ConversationHandler.END: ConversationHandler.END
        }
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setup_handlers(application)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")