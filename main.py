# main.py
import os
import logging
import pytz
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª–µ–π
import weather
import currency
import air_raid
import tcc_news
import database
import button_handlers

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = [['–ü–æ–≥–æ–¥–∞'], ['–ö—É—Ä—Å –≤–∞–ª—é—Ç'], ['–í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞'], ['–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö']]
main_reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    context.user_data.clear()
    try:
        await update.message.reply_markdown_v2(
            fr"–ü—Ä–∏–≤–µ—Ç, {user.mention_markdown_v2()}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_reply_markup,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {text}")
    try:
        if text == '–ü–æ–≥–æ–¥–∞':
            await weather.show_weather_menu(update, context)
            context.user_data['current_module'] = 'weather'
        elif text == '–ö—É—Ä—Å –≤–∞–ª—é—Ç':
            await currency.show_currency_menu(update, context)
            context.user_data['current_module'] = 'currency'
        elif text == '–í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞':
            await air_raid.show_air_raid_menu(update, context)
            context.user_data['current_module'] = 'air_raid'
        elif text == '–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö':
            await tcc_news.show_tcc_news_menu(update, context)
            context.user_data['current_module'] = 'tcc_news'
        else:
            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ({text}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª–µ–π
async def handle_module_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user = update.effective_user
    current_module = context.user_data.get('current_module')

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '{text}' –≤ –º–æ–¥—É–ª–µ '{current_module}'")

    try:
        if text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await start(update, context)
            context.user_data.pop('current_module', None)
            return

        if current_module == 'weather':
            await button_handlers.handle_weather_buttons(update, context)
        elif current_module == 'currency':
            await button_handlers.handle_currency_buttons(update, context)
        elif current_module == 'air_raid':
            await button_handlers.handle_air_raid_buttons(update, context)
        elif current_module == 'tcc_news':
            await button_handlers.handle_tcc_news_buttons(update, context)
        else:
            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '{text}' –≤ –º–æ–¥—É–ª–µ '{current_module}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def route_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_module = context.user_data.get('current_module')
    if current_module:
        await handle_module_buttons(update, context)
    else:
        await handle_main_menu(update, context)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env")
        return

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).timezone(pytz.utc).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, route_messages))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
