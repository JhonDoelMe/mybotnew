# main.py

import os
import logging
import pytz
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    JobQueue,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ)
import weather
import currency
import air_raid
import tcc_news
import database
import button_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = [['–ü–æ–≥–æ–¥–∞'], ['–ö—É—Ä—Å –≤–∞–ª—é—Ç'], ['–í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞'], ['–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö']]
main_reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    context.user_data.clear()
    try:
        await update.message.reply_markdown_v2(
            fr"–ü—Ä–∏–≤–µ—Ç, {user.mention_markdown_v2()}! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_reply_markup,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª {text} –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
    try:
        if text == '–ü–æ–≥–æ–¥–∞':
            await weather.show_weather_menu(update, context)
            context.user_data['current_module'] = 'weather'
        elif text == '–ö—É—Ä—Å –≤–∞–ª—é—Ç':
            await currency.show_currency_menu(update, context)
            context.user_data['current_module'] = 'currency'
        elif text == '–í–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞':
            await air_raid.show_air_raid_menu(update, context)
            context.user_data['current_module'] = 'air_raid'
        elif text == '–ù–æ–≤–æ—Å—Ç–∏ –¢–¶–ö':
            await tcc_news.show_tcc_news_menu(update, context)
            context.user_data['current_module'] = 'tcc_news'
        else:
            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–æ–¥—É–ª–µ–π
async def handle_module_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user = update.effective_user
    current_module = context.user_data.get('current_module')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª '{text}' –≤ –º–æ–¥—É–ª–µ '{current_module}'")

    try:
        if text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await start(update, context)
            context.user_data.pop('current_module', None)
            return

        if current_module == 'weather':
            await button_handlers.handle_weather_buttons(update, context)
        elif current_module == 'currency':
            await button_handlers.handle_currency_buttons(update, context)
        elif current_module == 'air_raid':
            await button_handlers.handle_air_raid_buttons(update, context)
        elif current_module == 'tcc_news':
            await button_handlers.handle_tcc_news_buttons(update, context)
        else:
            await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
async def route_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_module = context.user_data.get('current_module')
    if current_module:
        await handle_module_buttons(update, context)
    else:
        await handle_main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å pytz
    scheduler = AsyncIOScheduler(timezone=pytz.utc)
    job_queue = JobQueue(scheduler=scheduler)

    # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = ApplicationBuilder()\
        .token(TELEGRAM_BOT_TOKEN)\
        .job_queue(job_queue)\
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, route_messages))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
    